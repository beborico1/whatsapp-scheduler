# WhatsApp Scheduler Docker Compose Configuration
# Optimized for performance and ease of use

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: whatsapp_scheduler
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d whatsapp_scheduler"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://user:password@postgres/whatsapp_scheduler
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-Vms3xpDcNmJzvkmSteYTvlaicAImuhxwExhO/NTr9nc=}
      PYTHONUNBUFFERED: 1
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/.venv  # Exclude virtual env if exists
    command: sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    environment:
      DATABASE_URL: postgresql://user:password@postgres/whatsapp_scheduler
      REDIS_URL: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/.venv
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
    environment:
      DATABASE_URL: postgresql://user:password@postgres/whatsapp_scheduler
      REDIS_URL: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/.venv
    command: celery -A app.celery_app beat --loglevel=info
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - node:18-alpine
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - /app/.next        # If using Next.js
      - /app/build        # Build artifacts
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8000
      - WDS_SOCKET_PORT=3000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: whatsapp-scheduler-network
    driver: bridge